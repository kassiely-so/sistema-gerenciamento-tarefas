#include <stdio.h>
#include <string.h>

#define MAX_TAREFAS 100 // Define o número máximo de tarefas que podem ser cadastradas

// Estrutura que representa uma tarefa
typedef struct {
    char titulo[50];      // Título da tarefa
    char descricao[100];  // Descrição detalhada da tarefa
    char prioridade[10];  // Prioridade da tarefa (Alta, Média, Baixa)
    char status[15];      // Status da tarefa (Pendente, Concluído, etc.)
} Tarefa;

// Vetor para armazenar todas as tarefas
Tarefa tarefas[MAX_TAREFAS];
int total_tarefas = 0; // Variável que rastreia o número total de tarefas cadastradas

// Função para cadastrar uma nova tarefa
void cadastrar_tarefa() {
    // Verifica se o limite de tarefas foi atingido
    if (total_tarefas >= MAX_TAREFAS) {
        printf("Limite de tarefas atingido!\n");
        return;
    }

    Tarefa nova_tarefa; // Cria uma nova tarefa para ser preenchida pelo usuário

    // Solicita ao usuário as informações da tarefa
    printf("Digite o titulo da tarefa: ");
    scanf(" %[^\n]", nova_tarefa.titulo);

    printf("Digite a descricao da tarefa: ");
    scanf(" %[^\n]", nova_tarefa.descricao);

    printf("Digite a prioridade (Alta, Media, Baixa): ");
    scanf(" %[^\n]", nova_tarefa.prioridade);

    // Define o status inicial como "Pendente"
    strcpy(nova_tarefa.status, "Pendente");

    // Adiciona a nova tarefa ao vetor de tarefas
    tarefas[total_tarefas++] = nova_tarefa;
    printf("Tarefa cadastrada com sucesso!\n");
}

// Função para listar todas as tarefas cadastradas
void listar_tarefas() {
    // Verifica se há tarefas cadastradas
    if (total_tarefas == 0) {
        printf("Nenhuma tarefa cadastrada.\n");
        return;
    }

    // Exibe todas as tarefas armazenadas no vetor
    for (int i = 0; i < total_tarefas; i++) {
        printf("Tarefa %d:\n", i + 1);
        printf("Titulo: %s\n", tarefas[i].titulo);
        printf("Descricao: %s\n", tarefas[i].descricao);
        printf("Prioridade: %s\n", tarefas[i].prioridade);
        printf("Status: %s\n", tarefas[i].status);
        printf("---------------------------\n");
    }
}

// Função para excluir uma tarefa específica
void excluir_tarefa() {
    // Verifica se há tarefas cadastradas
    if (total_tarefas == 0) {
        printf("Nenhuma tarefa cadastrada.\n");
        return;
    }

    int indice; // Variável para armazenar o índice da tarefa a ser excluída
    printf("Digite o numero da tarefa para excluir (1 a %d): ", total_tarefas);
    scanf("%d", &indice);

    // Verifica se o índice informado é válido
    if (indice < 1 || indice > total_tarefas) {
        printf("Indice invalido!\n");
        return;
    }

    // Remove a tarefa deslocando os itens seguintes para trás
    for (int i = indice - 1; i < total_tarefas - 1; i++) {
        tarefas[i] = tarefas[i + 1];
    }
    total_tarefas--; // Decrementa o número total de tarefas

    printf("Tarefa %d excluida com sucesso!\n", indice);
}

// Função para salvar as tarefas em um arquivo texto
void salvar_em_arquivo() {
    // Abre o arquivo no modo de escrita
    FILE *arquivo = fopen("tarefas.txt", "w");
    if (arquivo == NULL) {
        printf("Erro ao salvar tarefas no arquivo.\n");
        return;
    }

    // Escreve cada tarefa no arquivo
    for (int i = 0; i < total_tarefas; i++) {
        fprintf(arquivo, "Tarefa %d:\n", i + 1);
        fprintf(arquivo, "Titulo: %s\n", tarefas[i].titulo);
        fprintf(arquivo, "Descricao: %s\n", tarefas[i].descricao);
        fprintf(arquivo, "Prioridade: %s\n", tarefas[i].prioridade);
        fprintf(arquivo, "Status: %s\n", tarefas[i].status);
        fprintf(arquivo, "---------------------------\n");
    }

    fclose(arquivo); // Fecha o arquivo após a escrita
    printf("Tarefas salvas no arquivo 'tarefas.txt' com sucesso!\n");
}

// Função principal para gerenciar o menu do sistema
int main() {
    int opcao; // Variável para armazenar a escolha do usuário

    do {
        // Exibe o menu de opções
        printf("\n1. Cadastrar Tarefa\n");
        printf("2. Listar Tarefas\n");
        printf("3. Excluir Tarefa\n");
        printf("4. Salvar Tarefas em Arquivo\n");
        printf("5. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        // Executa a ação com base na escolha do usuário
        switch (opcao) {
            case 1:
                cadastrar_tarefa(); // Chama a função de cadastro
                break;
            case 2:
                listar_tarefas(); // Chama a função de listagem
                break;
            case 3:
                excluir_tarefa(); // Chama a função de exclusão
                break;
            case 4:
                salvar_em_arquivo(); // Chama a função para salvar as tarefas
                break;
            case 5:
                printf("Saindo do programa...\n"); // Finaliza o programa
                break;
            default:
                printf("Opcao invalida! Tente novamente.\n"); // Trata entradas inválidas
        }
    } while (opcao != 5); // O programa continua até o usuário escolher "Sair"

    return 0;
}
